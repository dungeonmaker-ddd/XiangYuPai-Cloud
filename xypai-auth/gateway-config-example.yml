# 🚀 XyPai认证中心微服务网关配置 - 重构版本

spring:
  cloud:
    gateway:
      routes:
        # 🔐 APP认证服务路由 - 专门处理APP端认证 (端口: 8100)
        - id: xypai-auth-app-auth-service
          uri: lb://xypai-auth-app-auth
          predicates:
            - Path=/api/app/auth/**
          filters:
            - StripPrefix=3  # 移除 /api/app/auth 前缀
            - AddRequestHeader=X-Client-Source, app
            - AddRequestHeader=X-Service-Type, auth
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 20
                redis-rate-limiter.burstCapacity: 50
          metadata:
            response-timeout: 5000
            connect-timeout: 3000
            service-description: "APP端认证服务"

        # 🏛️ 管理端服务路由 - 处理管理端认证和业务 (端口: 8101)
        - id: xypai-auth-admin-service
          uri: lb://xypai-auth-admin
          predicates:
            - Path=/api/admin/**
          filters:
            - StripPrefix=2  # 移除 /api/admin 前缀
            - AddRequestHeader=X-Client-Source, admin
            - AddRequestHeader=X-Service-Type, business
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
          metadata:
            response-timeout: 8000
            connect-timeout: 3000
            service-description: "管理端业务服务"

        # 📱 APP业务服务路由 - 处理APP端业务功能 (端口: 8102)
        - id: xypai-auth-app-business-service
          uri: lb://xypai-auth-app
          predicates:
            - Path=/api/app/business/**
          filters:
            - StripPrefix=3  # 移除 /api/app/business 前缀
            - AddRequestHeader=X-Client-Source, app
            - AddRequestHeader=X-Service-Type, business
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 30
                redis-rate-limiter.burstCapacity: 80
          metadata:
            response-timeout: 10000
            connect-timeout: 3000
            service-description: "APP端业务服务"

        # 🔄 向后兼容路由 - 临时支持旧的统一认证入口
        - id: legacy-unified-auth-route
          uri: lb://xypai-auth-app-auth
          predicates:
            - Path=/api/auth/**
            - Header=X-Legacy-Support, true
          filters:
            - StripPrefix=2  # 移除 /api/auth 前缀
            - AddRequestHeader=X-Client-Source, legacy
            - AddResponseHeader=X-Deprecation-Warning, "This endpoint is deprecated. Use specific service endpoints."

      # 🔒 全局过滤器配置
      default-filters:
        - AddResponseHeader=X-Response-Default-Foo, Default-Bar
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY,SERVICE_UNAVAILABLE
            methods: GET,POST
            backoff:
              firstBackoff: 10ms
              maxBackoff: 50ms
              factor: 2

      # 🌐 CORS配置 - 生产级配置
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns:
              - "${CORS_ALLOWED_ORIGINS:http://localhost:*,https://localhost:*}"
            allowedMethods:
              - GET
              - POST
              - DELETE
              - PUT
              - PATCH
              - OPTIONS
            allowedHeaders:
              - "*"
            exposedHeaders:
              - "X-Total-Count"
              - "X-Request-ID"
              - "X-Service-Version"
            allowCredentials: true
            maxAge: 3600

# 🔍 服务发现配置 - 使用Nacos替代Eureka
spring:
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_ADDR:127.0.0.1:8848}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}
        namespace: ${NACOS_NAMESPACE:public}
        group: ${NACOS_GROUP:DEFAULT_GROUP}
      config:
        server-addr: ${NACOS_ADDR:127.0.0.1:8848}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}
        namespace: ${NACOS_NAMESPACE:public}
        group: ${NACOS_GROUP:DEFAULT_GROUP}
        file-extension: yml

# 📊 监控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway
  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true

# 📝 日志配置
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    reactor.netty.http.client: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# 🚦 限流配置（如果使用Redis）
spring:
  redis:
    host: localhost
    port: 6379
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
